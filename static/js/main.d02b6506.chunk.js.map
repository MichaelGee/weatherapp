{"version":3,"sources":["components/title.js","components/form.js","components/weather.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","class","name","placeholder","Weather","city","temprature","humidity","description","error","icon","src","concat","Footer","API_KEY","App","state","undefined","country","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","console","log","_this","setState","main","temp","weather","stop","this","title","components_form","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d02b6506.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Title =()=>(\r\n  <div className=\"text-center title\">\r\n  <h1>WeatherLens</h1>\r\n  </div>\r\n);\r\n\r\nexport default Title;\r\n","import React from 'react'\r\n\r\n const Form =(props)=> (\r\n   <div className=\"container form\">\r\n   <div className=\"row align-items-center justify-content-center\">\r\n   <div className=\" col-10 col-md-6 col-sm-8\">\r\n    <form onSubmit={props.getWeather}>\r\n    <h2 className=\"text-center subtext\">Add a city and country</h2>\r\n    <input type=\"text\" class=\"form-control mb-2\" name='city' placeholder=\"City\"/>\r\n    <input type=\"text\" class=\"form-control mb-2\" name='country' placeholder=\"Country\"/>\r\n    <button className=\"btn btn-primary align-items-right\">Submit</button>\r\n    </form>\r\n   </div>\r\n   </div>\r\n   </div>\r\n );\r\nexport default Form;\r\n","import React from 'react'\r\n\r\nconst Weather =(props)=> (\r\n    <div className=\"weather\">\r\n\r\n        <div className=\"row align-items-center justify-content-center\">\r\n            {props.city && <div className=\"card\">\r\n            <ul className=\"list-group list-group-flush\">\r\n            {props.city && <li className=\"list-group-item\"><p>Location: {props.city}</p></li>}\r\n            {props.temprature  && <li className=\"list-group-item\"><p>Temprature: {props.temprature} Â°C</p></li>}\r\n            {props.humidity && <li className=\"list-group-item\"> <p>Humidity: {props.humidity}</p></li>}\r\n            {props.description && <li className=\"list-group-item\"><p>Description: {props.description}</p></li>}\r\n            {props.error && <li className=\"list-group-item\"><p>{props.error}</p></li>}\r\n            {props.icon && <li className=\"list-group-item\"><img src={`http://openweathermap.org/img/w/${props.icon}.png`}/></li>}\r\n            </ul>\r\n            </div>}\r\n        </div>\r\n\r\n      </div>\r\n);\r\n\r\n\r\n\r\n\r\nexport default Weather;\r\n","import React from 'react'\r\n\r\nconst Footer =()=>(\r\n  <div className=\"text-center footer\">\r\n  <p>Mickie Gates 2018</p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Title from \"./components/title\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\nimport Footer from \"./components/footer\";\n\nconst API_KEY = \"8c679e7fb556ba43b9f82a3845265f46\";\n\nclass App extends Component {\n\n    state ={\n      temprature: undefined,\n      city: undefined,\n      description: undefined,\n      country: undefined,\n      humidity: undefined,\n      icon: undefined,\n      error: undefined\n    }\n\n  getWeather = async (e)=> {\n    \n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}, ${country}id=524901&units=metric&APPID=${API_KEY}`);\n    const data = await api_call.json();\n\n    if(city && country){\n      console.log(data);\n      this.setState({\n        temprature : data.main.temp,\n        humidity: data.main.humidity,\n        city : data.name,\n        icon: data.weather[0].icon,\n        description: data.weather[0].description,\n        error : \"\"\n      })\n    }else{\n      console.log(data);\n      this.setState({\n        temprature : undefined,\n        humidity: undefined,\n        city : undefined,\n        description: undefined,\n        icon : undefined,\n        error : \"Please enter some values\"\n      });\n    }\n  \n  }\n\n  render() {\n    return (\n      <div className=\"App container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n        <Title/>\n        <Form getWeather={this.getWeather}/>\n        <Weather\n        city={this.state.city} \n        temprature={this.state.temprature}\n        humidity={this.state.humidity}\n        description={this.state.description}\n        icon={this.state.icon}\n        error = {this.state.error}\n        />\n       \n        </div>\n      </div>\n       <Footer/>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}